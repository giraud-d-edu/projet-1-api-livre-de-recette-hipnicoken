import { RecipeRepository } from "../repositories/recipe.repository.ts";
import { IngredientRepository } from "../repositories/ingredient.repository.ts";
import { Recipe } from "../models/recipe.model.ts";

// üéØ Service m√©tier pour g√©rer les recettes
// C'est ici qu'on applique la logique m√©tier (v√©rification, r√®gles, etc.)
export const RecipeService = {

  // ‚úÖ R√©cup√©rer toutes les recettes avec ou sans filtres
  async getAll(filters: any = {}): Promise<Recipe[]> {
    return await RecipeRepository.findAll(filters);
  },

  // ‚úÖ R√©cup√©rer une recette par son ID
  async getById(id: string): Promise<Recipe | null> {
    return await RecipeRepository.findById(id);
  },

  // ‚úÖ R√©cup√©rer une recette par son titre exact
  async getByTitle(title: string): Promise<Recipe | null> {
    return await RecipeRepository.findByTitle(title);
  },

  // ‚úÖ R√©cup√©rer toutes les recettes d‚Äôune cat√©gorie donn√©e
  async getByCategory(category: string): Promise<Recipe[]> {
    return await RecipeRepository.findByCategory(category);
  },

  // ‚úÖ R√©cup√©rer toutes les recettes qui contiennent un ingr√©dient via son ID
  async getByIngredient(ingredientId: string): Promise<Recipe[]> {
    return await RecipeRepository.findByIngredient(ingredientId);
  },

  // ‚úÖ R√©cup√©rer les recettes qui contiennent un ingr√©dient en se basant sur son nom
  async getByIngredientName(name: string) {
    const ingredient = await IngredientRepository.findByName(name);

    if (!ingredient) {
      return []; // Aucun ingr√©dient trouv√© ‚Üí pas de recette
    }

    return await RecipeRepository.findByIngredient(ingredient._id.toString());
  },

  // ‚úÖ Cr√©er une recette
  // On v√©rifie ici qu‚Äôaucune recette avec le m√™me titre n‚Äôexiste d√©j√†
  async create(data: Omit<Recipe, "_id" | "createdAt" | "updatedAt">): Promise<Recipe> {
    const existing = await RecipeRepository.findByTitle(data.title);

    if (existing) {
      throw new Error("Cette recette existe d√©j√†.");
    }

    return await RecipeRepository.insert(data);
  },

  // ‚úÖ Mettre √† jour une recette
  // Ici, on retourne directement la recette mise √† jour, pas juste un bool√©en
  async update(id: string, data: Partial<Recipe>): Promise<Recipe | null> {
    const updated = await RecipeRepository.update(id, data);

    if (!updated) return null;

    return await RecipeRepository.findById(id); // On retourne la nouvelle version
  },

  // ‚úÖ Supprimer une recette par son ID
  async delete(id: string): Promise<boolean> {
    const result = await RecipeRepository.delete(id);
    return result !== null;
  },
};
